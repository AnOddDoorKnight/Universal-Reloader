// [Ace] This is used for both crafting and disassembly.
class HDRel_Recipe {

	int enabled;
	class<HDAmmo> AmmoClass;
	class<HDRel_CraftingMaterial> Materials[HDUniversalReloader.MaterialCount];
	int Costs[HDUniversalReloader.MaterialCount];
	double Products[HDUniversalReloader.MaterialCount];
	double SpeedMult;

	static HDRel_Recipe TryCreate(string amcls, int enabled,
		class<HDRel_CraftingMaterial> projMat,   int projCost, double projProd,
		class<HDRel_CraftingMaterial> casingMat, int csgCost,  double csgProd,
		class<HDRel_CraftingMaterial> powderMat, int pwdCost,  double pwdProd,
		double speed
	) {
		HDRel_Recipe Ret = new("HDRel_Recipe");
		
		Ret.AmmoClass = amcls;
		if (Ret.AmmoClass) {
			Ret.enabled = enabled;

			Ret.Materials[0] = projMat;
			Ret.Costs[0] = projCost;
			Ret.Products[0] = projProd;

			Ret.Materials[1] = casingMat;
			Ret.Costs[1] = csgCost;
			Ret.Products[1] = csgProd;

			Ret.Materials[2] = powderMat;
			Ret.Costs[2] = pwdCost;
			Ret.Products[2] = pwdProd;

			Ret.SpeedMult = speed;

			return Ret;
		}

		return null;
	}

	bool CanBeAssembled() {
		return enabled & ASSEMBLE_ONLY;
	}

	bool CanBeDisassembled() {
		return enabled & DISASSEMBLE_ONLY;
	}
}

enum RecipeEnabledState {
	DISABLED         = 0,
	ASSEMBLE_ONLY    = 1,
	DISASSEMBLE_ONLY = 2,
	BOTH             = 3
}